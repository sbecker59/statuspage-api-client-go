/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IncidentUpdatesApiService IncidentUpdatesApi service
type IncidentUpdatesApiService service

type ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest struct {
	ctx _context.Context
	ApiService *IncidentUpdatesApiService
	pageId string
	incidentId string
	incidentUpdateId string
	patchPagesPageIdIncidentsIncidentIdIncidentUpdates *PatchPagesPageIdIncidentsIncidentIdIncidentUpdates
}

func (r ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) PatchPagesPageIdIncidentsIncidentIdIncidentUpdates(patchPagesPageIdIncidentsIncidentIdIncidentUpdates PatchPagesPageIdIncidentsIncidentIdIncidentUpdates) ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest {
	r.patchPagesPageIdIncidentsIncidentIdIncidentUpdates = &patchPagesPageIdIncidentsIncidentIdIncidentUpdates
	return r
}

func (r ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) Execute() (IncidentUpdate, *_nethttp.Response, error) {
	return r.ApiService.PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdExecute(r)
}

/*
PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId Update a previous incident update

Update a previous incident update

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @param incidentUpdateId Incident Update Identifier
 @return ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest
*/
func (a *IncidentUpdatesApiService) PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId(ctx _context.Context, pageId string, incidentId string, incidentUpdateId string) ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest {
	return ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
		incidentUpdateId: incidentUpdateId,
	}
}

// Execute executes the request
//  @return IncidentUpdate
func (a *IncidentUpdatesApiService) PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdExecute(r ApiPatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) (IncidentUpdate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IncidentUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentUpdatesApiService.PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_update_id"+"}", _neturl.PathEscape(parameterToString(r.incidentUpdateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchPagesPageIdIncidentsIncidentIdIncidentUpdates == nil {
		return localVarReturnValue, nil, reportError("patchPagesPageIdIncidentsIncidentIdIncidentUpdates is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchPagesPageIdIncidentsIncidentIdIncidentUpdates
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest struct {
	ctx _context.Context
	ApiService *IncidentUpdatesApiService
	pageId string
	incidentId string
	incidentUpdateId string
	putPagesPageIdIncidentsIncidentIdIncidentUpdates *PutPagesPageIdIncidentsIncidentIdIncidentUpdates
}

func (r ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) PutPagesPageIdIncidentsIncidentIdIncidentUpdates(putPagesPageIdIncidentsIncidentIdIncidentUpdates PutPagesPageIdIncidentsIncidentIdIncidentUpdates) ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest {
	r.putPagesPageIdIncidentsIncidentIdIncidentUpdates = &putPagesPageIdIncidentsIncidentIdIncidentUpdates
	return r
}

func (r ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) Execute() (IncidentUpdate, *_nethttp.Response, error) {
	return r.ApiService.PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdExecute(r)
}

/*
PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId Update a previous incident update

Update a previous incident update

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @param incidentUpdateId Incident Update Identifier
 @return ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest
*/
func (a *IncidentUpdatesApiService) PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId(ctx _context.Context, pageId string, incidentId string, incidentUpdateId string) ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest {
	return ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
		incidentUpdateId: incidentUpdateId,
	}
}

// Execute executes the request
//  @return IncidentUpdate
func (a *IncidentUpdatesApiService) PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdExecute(r ApiPutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdRequest) (IncidentUpdate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IncidentUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentUpdatesApiService.PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_update_id"+"}", _neturl.PathEscape(parameterToString(r.incidentUpdateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.putPagesPageIdIncidentsIncidentIdIncidentUpdates == nil {
		return localVarReturnValue, nil, reportError("putPagesPageIdIncidentsIncidentIdIncidentUpdates is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putPagesPageIdIncidentsIncidentIdIncidentUpdates
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
