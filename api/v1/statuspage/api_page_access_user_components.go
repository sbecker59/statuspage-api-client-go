/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PageAccessUserComponentsApiService PageAccessUserComponentsApi service
type PageAccessUserComponentsApiService service

type ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	deletePagesPageIdPageAccessUsersPageAccessUserIdComponents *DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents
}

func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents(deletePagesPageIdPageAccessUsersPageAccessUserIdComponents DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.deletePagesPageIdPageAccessUsersPageAccessUserIdComponents = &deletePagesPageIdPageAccessUsersPageAccessUserIdComponents
	return r
}

func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r)
}

/*
DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents Remove components for page access user

Remove components for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest
*/
func (a *PageAccessUserComponentsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents(ctx _context.Context, pageId string, pageAccessUserId string) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserComponentsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deletePagesPageIdPageAccessUsersPageAccessUserIdComponents == nil {
		return localVarReturnValue, nil, reportError("deletePagesPageIdPageAccessUsersPageAccessUserIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePagesPageIdPageAccessUsersPageAccessUserIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	componentId string
}


func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdExecute(r)
}

/*
DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId Remove component for page access user

Remove component for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @param componentId Component identifier
 @return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest
*/
func (a *PageAccessUserComponentsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId(ctx _context.Context, pageId string, pageAccessUserId string, componentId string) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest {
	return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
		componentId: componentId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserComponentsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdExecute(r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"component_id"+"}", _neturl.PathEscape(parameterToString(r.componentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	page *int32
	perPage *int32
}

// Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Page(page int32) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.page = &page
	return r
}
// Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) PerPage(perPage int32) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Execute() ([]Component, *_nethttp.Response, error) {
	return r.ApiService.GetPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r)
}

/*
GetPagesPageIdPageAccessUsersPageAccessUserIdComponents Get components for page access user

Get components for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest
*/
func (a *PageAccessUserComponentsApiService) GetPagesPageIdPageAccessUsersPageAccessUserIdComponents(ctx _context.Context, pageId string, pageAccessUserId string) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	return ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return []Component
func (a *PageAccessUserComponentsApiService) GetPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) ([]Component, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.GetPagesPageIdPageAccessUsersPageAccessUserIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	patchPagesPageIdPageAccessUsersPageAccessUserIdComponents *PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents
}

func (r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents(patchPagesPageIdPageAccessUsersPageAccessUserIdComponents PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents) ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.patchPagesPageIdPageAccessUsersPageAccessUserIdComponents = &patchPagesPageIdPageAccessUsersPageAccessUserIdComponents
	return r
}

func (r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r)
}

/*
PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents Add components for page access user

Add components for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest
*/
func (a *PageAccessUserComponentsApiService) PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents(ctx _context.Context, pageId string, pageAccessUserId string) ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	return ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserComponentsApiService) PatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchPagesPageIdPageAccessUsersPageAccessUserIdComponents == nil {
		return localVarReturnValue, nil, reportError("patchPagesPageIdPageAccessUsersPageAccessUserIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchPagesPageIdPageAccessUsersPageAccessUserIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	postPagesPageIdPageAccessUsersPageAccessUserIdComponents *PostPagesPageIdPageAccessUsersPageAccessUserIdComponents
}

func (r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) PostPagesPageIdPageAccessUsersPageAccessUserIdComponents(postPagesPageIdPageAccessUsersPageAccessUserIdComponents PostPagesPageIdPageAccessUsersPageAccessUserIdComponents) ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.postPagesPageIdPageAccessUsersPageAccessUserIdComponents = &postPagesPageIdPageAccessUsersPageAccessUserIdComponents
	return r
}

func (r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PostPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r)
}

/*
PostPagesPageIdPageAccessUsersPageAccessUserIdComponents Replace components for page access user

Replace components for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest
*/
func (a *PageAccessUserComponentsApiService) PostPagesPageIdPageAccessUsersPageAccessUserIdComponents(ctx _context.Context, pageId string, pageAccessUserId string) ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	return ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserComponentsApiService) PostPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.PostPagesPageIdPageAccessUsersPageAccessUserIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.postPagesPageIdPageAccessUsersPageAccessUserIdComponents == nil {
		return localVarReturnValue, nil, reportError("postPagesPageIdPageAccessUsersPageAccessUserIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postPagesPageIdPageAccessUsersPageAccessUserIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserComponentsApiService
	pageId string
	pageAccessUserId string
	putPagesPageIdPageAccessUsersPageAccessUserIdComponents *PutPagesPageIdPageAccessUsersPageAccessUserIdComponents
}

func (r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) PutPagesPageIdPageAccessUsersPageAccessUserIdComponents(putPagesPageIdPageAccessUsersPageAccessUserIdComponents PutPagesPageIdPageAccessUsersPageAccessUserIdComponents) ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	r.putPagesPageIdPageAccessUsersPageAccessUserIdComponents = &putPagesPageIdPageAccessUsersPageAccessUserIdComponents
	return r
}

func (r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PutPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r)
}

/*
PutPagesPageIdPageAccessUsersPageAccessUserIdComponents Add components for page access user

Add components for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest
*/
func (a *PageAccessUserComponentsApiService) PutPagesPageIdPageAccessUsersPageAccessUserIdComponents(ctx _context.Context, pageId string, pageAccessUserId string) ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest {
	return ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserComponentsApiService) PutPagesPageIdPageAccessUsersPageAccessUserIdComponentsExecute(r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdComponentsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserComponentsApiService.PutPagesPageIdPageAccessUsersPageAccessUserIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.putPagesPageIdPageAccessUsersPageAccessUserIdComponents == nil {
		return localVarReturnValue, nil, reportError("putPagesPageIdPageAccessUsersPageAccessUserIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putPagesPageIdPageAccessUsersPageAccessUserIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
