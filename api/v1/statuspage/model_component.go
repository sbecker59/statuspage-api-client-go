/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Component Add page access groups to a component
type Component struct {
	// Identifier for component
	Id *string `json:"id,omitempty"`
	// Page identifier
	PageId *string `json:"page_id,omitempty"`
	// Component Group identifier
	GroupId *string `json:"group_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Is this component a group
	Group *bool `json:"group,omitempty"`
	// Display name for component
	Name *string `json:"name,omitempty"`
	// More detailed description for component
	Description *string `json:"description,omitempty"`
	// Order the component will appear on the page
	Position *int32 `json:"position,omitempty"`
	// Status of component
	Status *string `json:"status,omitempty"`
	// Should this component be showcased
	Showcase *bool `json:"showcase,omitempty"`
	// Requires a special feature flag to be enabled
	OnlyShowIfDegraded *bool `json:"only_show_if_degraded,omitempty"`
	// Requires a special feature flag to be enabled
	AutomationEmail *string `json:"automation_email,omitempty"`
	// The date this component started being used
	StartDate *string `json:"start_date,omitempty"`
}

// NewComponent instantiates a new Component object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponent() *Component {
	this := Component{}
	return &this
}

// NewComponentWithDefaults instantiates a new Component object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentWithDefaults() *Component {
	this := Component{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Component) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Component) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Component) SetId(v string) {
	o.Id = &v
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *Component) GetPageId() string {
	if o == nil || o.PageId == nil {
		var ret string
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetPageIdOk() (*string, bool) {
	if o == nil || o.PageId == nil {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *Component) HasPageId() bool {
	if o != nil && o.PageId != nil {
		return true
	}

	return false
}

// SetPageId gets a reference to the given string and assigns it to the PageId field.
func (o *Component) SetPageId(v string) {
	o.PageId = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Component) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Component) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Component) SetGroupId(v string) {
	o.GroupId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Component) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Component) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Component) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Component) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Component) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Component) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Component) GetGroup() bool {
	if o == nil || o.Group == nil {
		var ret bool
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetGroupOk() (*bool, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Component) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given bool and assigns it to the Group field.
func (o *Component) SetGroup(v bool) {
	o.Group = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Component) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Component) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Component) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Component) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Component) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Component) SetDescription(v string) {
	o.Description = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Component) GetPosition() int32 {
	if o == nil || o.Position == nil {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetPositionOk() (*int32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Component) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *Component) SetPosition(v int32) {
	o.Position = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Component) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Component) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Component) SetStatus(v string) {
	o.Status = &v
}

// GetShowcase returns the Showcase field value if set, zero value otherwise.
func (o *Component) GetShowcase() bool {
	if o == nil || o.Showcase == nil {
		var ret bool
		return ret
	}
	return *o.Showcase
}

// GetShowcaseOk returns a tuple with the Showcase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetShowcaseOk() (*bool, bool) {
	if o == nil || o.Showcase == nil {
		return nil, false
	}
	return o.Showcase, true
}

// HasShowcase returns a boolean if a field has been set.
func (o *Component) HasShowcase() bool {
	if o != nil && o.Showcase != nil {
		return true
	}

	return false
}

// SetShowcase gets a reference to the given bool and assigns it to the Showcase field.
func (o *Component) SetShowcase(v bool) {
	o.Showcase = &v
}

// GetOnlyShowIfDegraded returns the OnlyShowIfDegraded field value if set, zero value otherwise.
func (o *Component) GetOnlyShowIfDegraded() bool {
	if o == nil || o.OnlyShowIfDegraded == nil {
		var ret bool
		return ret
	}
	return *o.OnlyShowIfDegraded
}

// GetOnlyShowIfDegradedOk returns a tuple with the OnlyShowIfDegraded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetOnlyShowIfDegradedOk() (*bool, bool) {
	if o == nil || o.OnlyShowIfDegraded == nil {
		return nil, false
	}
	return o.OnlyShowIfDegraded, true
}

// HasOnlyShowIfDegraded returns a boolean if a field has been set.
func (o *Component) HasOnlyShowIfDegraded() bool {
	if o != nil && o.OnlyShowIfDegraded != nil {
		return true
	}

	return false
}

// SetOnlyShowIfDegraded gets a reference to the given bool and assigns it to the OnlyShowIfDegraded field.
func (o *Component) SetOnlyShowIfDegraded(v bool) {
	o.OnlyShowIfDegraded = &v
}

// GetAutomationEmail returns the AutomationEmail field value if set, zero value otherwise.
func (o *Component) GetAutomationEmail() string {
	if o == nil || o.AutomationEmail == nil {
		var ret string
		return ret
	}
	return *o.AutomationEmail
}

// GetAutomationEmailOk returns a tuple with the AutomationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetAutomationEmailOk() (*string, bool) {
	if o == nil || o.AutomationEmail == nil {
		return nil, false
	}
	return o.AutomationEmail, true
}

// HasAutomationEmail returns a boolean if a field has been set.
func (o *Component) HasAutomationEmail() bool {
	if o != nil && o.AutomationEmail != nil {
		return true
	}

	return false
}

// SetAutomationEmail gets a reference to the given string and assigns it to the AutomationEmail field.
func (o *Component) SetAutomationEmail(v string) {
	o.AutomationEmail = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Component) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Component) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Component) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Component) SetStartDate(v string) {
	o.StartDate = &v
}

func (o Component) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PageId != nil {
		toSerialize["page_id"] = o.PageId
	}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Showcase != nil {
		toSerialize["showcase"] = o.Showcase
	}
	if o.OnlyShowIfDegraded != nil {
		toSerialize["only_show_if_degraded"] = o.OnlyShowIfDegraded
	}
	if o.AutomationEmail != nil {
		toSerialize["automation_email"] = o.AutomationEmail
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	return json.Marshal(toSerialize)
}

type NullableComponent struct {
	value *Component
	isSet bool
}

func (v NullableComponent) Get() *Component {
	return v.value
}

func (v *NullableComponent) Set(val *Component) {
	v.value = val
	v.isSet = true
}

func (v NullableComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponent(val *Component) *NullableComponent {
	return &NullableComponent{value: val, isSet: true}
}

func (v NullableComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


