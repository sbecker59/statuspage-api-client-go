/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IncidentUpdate Update a previous incident update
type IncidentUpdate struct {
	// Incident Update Identifier.
	Id *string `json:"id,omitempty"`
	// Incident Identifier.
	IncidentId *string `json:"incident_id,omitempty"`
	// Affected components associated with the incident update.
	AffectedComponents *[]map[string]interface{} `json:"affected_components,omitempty"`
	// Incident update body.
	Body *string `json:"body,omitempty"`
	// The timestamp when the incident update was created at.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// An optional customized tweet message for incident postmortem.
	CustomTweet *string `json:"custom_tweet,omitempty"`
	// Controls whether to delivery notifications.
	DeliverNotifications *bool `json:"deliver_notifications,omitempty"`
	// Timestamp when incident update is happened.
	DisplayAt *time.Time `json:"display_at,omitempty"`
	// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
	Status *string `json:"status,omitempty"`
	// Tweet identifier associated to this incident update.
	TweetId *string `json:"tweet_id,omitempty"`
	// The timestamp when twitter updated at.
	TwitterUpdatedAt *time.Time `json:"twitter_updated_at,omitempty"`
	// The timestamp when the incident update is updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Controls whether to create twitter update.
	WantsTwitterUpdate *bool `json:"wants_twitter_update,omitempty"`
}

// NewIncidentUpdate instantiates a new IncidentUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentUpdate() *IncidentUpdate {
	this := IncidentUpdate{}
	return &this
}

// NewIncidentUpdateWithDefaults instantiates a new IncidentUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentUpdateWithDefaults() *IncidentUpdate {
	this := IncidentUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentUpdate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentUpdate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncidentUpdate) SetId(v string) {
	o.Id = &v
}

// GetIncidentId returns the IncidentId field value if set, zero value otherwise.
func (o *IncidentUpdate) GetIncidentId() string {
	if o == nil || o.IncidentId == nil {
		var ret string
		return ret
	}
	return *o.IncidentId
}

// GetIncidentIdOk returns a tuple with the IncidentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetIncidentIdOk() (*string, bool) {
	if o == nil || o.IncidentId == nil {
		return nil, false
	}
	return o.IncidentId, true
}

// HasIncidentId returns a boolean if a field has been set.
func (o *IncidentUpdate) HasIncidentId() bool {
	if o != nil && o.IncidentId != nil {
		return true
	}

	return false
}

// SetIncidentId gets a reference to the given string and assigns it to the IncidentId field.
func (o *IncidentUpdate) SetIncidentId(v string) {
	o.IncidentId = &v
}

// GetAffectedComponents returns the AffectedComponents field value if set, zero value otherwise.
func (o *IncidentUpdate) GetAffectedComponents() []map[string]interface{} {
	if o == nil || o.AffectedComponents == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.AffectedComponents
}

// GetAffectedComponentsOk returns a tuple with the AffectedComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetAffectedComponentsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.AffectedComponents == nil {
		return nil, false
	}
	return o.AffectedComponents, true
}

// HasAffectedComponents returns a boolean if a field has been set.
func (o *IncidentUpdate) HasAffectedComponents() bool {
	if o != nil && o.AffectedComponents != nil {
		return true
	}

	return false
}

// SetAffectedComponents gets a reference to the given []map[string]interface{} and assigns it to the AffectedComponents field.
func (o *IncidentUpdate) SetAffectedComponents(v []map[string]interface{}) {
	o.AffectedComponents = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *IncidentUpdate) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *IncidentUpdate) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *IncidentUpdate) SetBody(v string) {
	o.Body = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IncidentUpdate) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IncidentUpdate) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IncidentUpdate) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCustomTweet returns the CustomTweet field value if set, zero value otherwise.
func (o *IncidentUpdate) GetCustomTweet() string {
	if o == nil || o.CustomTweet == nil {
		var ret string
		return ret
	}
	return *o.CustomTweet
}

// GetCustomTweetOk returns a tuple with the CustomTweet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetCustomTweetOk() (*string, bool) {
	if o == nil || o.CustomTweet == nil {
		return nil, false
	}
	return o.CustomTweet, true
}

// HasCustomTweet returns a boolean if a field has been set.
func (o *IncidentUpdate) HasCustomTweet() bool {
	if o != nil && o.CustomTweet != nil {
		return true
	}

	return false
}

// SetCustomTweet gets a reference to the given string and assigns it to the CustomTweet field.
func (o *IncidentUpdate) SetCustomTweet(v string) {
	o.CustomTweet = &v
}

// GetDeliverNotifications returns the DeliverNotifications field value if set, zero value otherwise.
func (o *IncidentUpdate) GetDeliverNotifications() bool {
	if o == nil || o.DeliverNotifications == nil {
		var ret bool
		return ret
	}
	return *o.DeliverNotifications
}

// GetDeliverNotificationsOk returns a tuple with the DeliverNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetDeliverNotificationsOk() (*bool, bool) {
	if o == nil || o.DeliverNotifications == nil {
		return nil, false
	}
	return o.DeliverNotifications, true
}

// HasDeliverNotifications returns a boolean if a field has been set.
func (o *IncidentUpdate) HasDeliverNotifications() bool {
	if o != nil && o.DeliverNotifications != nil {
		return true
	}

	return false
}

// SetDeliverNotifications gets a reference to the given bool and assigns it to the DeliverNotifications field.
func (o *IncidentUpdate) SetDeliverNotifications(v bool) {
	o.DeliverNotifications = &v
}

// GetDisplayAt returns the DisplayAt field value if set, zero value otherwise.
func (o *IncidentUpdate) GetDisplayAt() time.Time {
	if o == nil || o.DisplayAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DisplayAt
}

// GetDisplayAtOk returns a tuple with the DisplayAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetDisplayAtOk() (*time.Time, bool) {
	if o == nil || o.DisplayAt == nil {
		return nil, false
	}
	return o.DisplayAt, true
}

// HasDisplayAt returns a boolean if a field has been set.
func (o *IncidentUpdate) HasDisplayAt() bool {
	if o != nil && o.DisplayAt != nil {
		return true
	}

	return false
}

// SetDisplayAt gets a reference to the given time.Time and assigns it to the DisplayAt field.
func (o *IncidentUpdate) SetDisplayAt(v time.Time) {
	o.DisplayAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IncidentUpdate) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IncidentUpdate) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IncidentUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetTweetId returns the TweetId field value if set, zero value otherwise.
func (o *IncidentUpdate) GetTweetId() string {
	if o == nil || o.TweetId == nil {
		var ret string
		return ret
	}
	return *o.TweetId
}

// GetTweetIdOk returns a tuple with the TweetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetTweetIdOk() (*string, bool) {
	if o == nil || o.TweetId == nil {
		return nil, false
	}
	return o.TweetId, true
}

// HasTweetId returns a boolean if a field has been set.
func (o *IncidentUpdate) HasTweetId() bool {
	if o != nil && o.TweetId != nil {
		return true
	}

	return false
}

// SetTweetId gets a reference to the given string and assigns it to the TweetId field.
func (o *IncidentUpdate) SetTweetId(v string) {
	o.TweetId = &v
}

// GetTwitterUpdatedAt returns the TwitterUpdatedAt field value if set, zero value otherwise.
func (o *IncidentUpdate) GetTwitterUpdatedAt() time.Time {
	if o == nil || o.TwitterUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.TwitterUpdatedAt
}

// GetTwitterUpdatedAtOk returns a tuple with the TwitterUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetTwitterUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.TwitterUpdatedAt == nil {
		return nil, false
	}
	return o.TwitterUpdatedAt, true
}

// HasTwitterUpdatedAt returns a boolean if a field has been set.
func (o *IncidentUpdate) HasTwitterUpdatedAt() bool {
	if o != nil && o.TwitterUpdatedAt != nil {
		return true
	}

	return false
}

// SetTwitterUpdatedAt gets a reference to the given time.Time and assigns it to the TwitterUpdatedAt field.
func (o *IncidentUpdate) SetTwitterUpdatedAt(v time.Time) {
	o.TwitterUpdatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IncidentUpdate) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IncidentUpdate) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IncidentUpdate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetWantsTwitterUpdate returns the WantsTwitterUpdate field value if set, zero value otherwise.
func (o *IncidentUpdate) GetWantsTwitterUpdate() bool {
	if o == nil || o.WantsTwitterUpdate == nil {
		var ret bool
		return ret
	}
	return *o.WantsTwitterUpdate
}

// GetWantsTwitterUpdateOk returns a tuple with the WantsTwitterUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentUpdate) GetWantsTwitterUpdateOk() (*bool, bool) {
	if o == nil || o.WantsTwitterUpdate == nil {
		return nil, false
	}
	return o.WantsTwitterUpdate, true
}

// HasWantsTwitterUpdate returns a boolean if a field has been set.
func (o *IncidentUpdate) HasWantsTwitterUpdate() bool {
	if o != nil && o.WantsTwitterUpdate != nil {
		return true
	}

	return false
}

// SetWantsTwitterUpdate gets a reference to the given bool and assigns it to the WantsTwitterUpdate field.
func (o *IncidentUpdate) SetWantsTwitterUpdate(v bool) {
	o.WantsTwitterUpdate = &v
}

func (o IncidentUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncidentId != nil {
		toSerialize["incident_id"] = o.IncidentId
	}
	if o.AffectedComponents != nil {
		toSerialize["affected_components"] = o.AffectedComponents
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CustomTweet != nil {
		toSerialize["custom_tweet"] = o.CustomTweet
	}
	if o.DeliverNotifications != nil {
		toSerialize["deliver_notifications"] = o.DeliverNotifications
	}
	if o.DisplayAt != nil {
		toSerialize["display_at"] = o.DisplayAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TweetId != nil {
		toSerialize["tweet_id"] = o.TweetId
	}
	if o.TwitterUpdatedAt != nil {
		toSerialize["twitter_updated_at"] = o.TwitterUpdatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.WantsTwitterUpdate != nil {
		toSerialize["wants_twitter_update"] = o.WantsTwitterUpdate
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentUpdate struct {
	value *IncidentUpdate
	isSet bool
}

func (v NullableIncidentUpdate) Get() *IncidentUpdate {
	return v.value
}

func (v *NullableIncidentUpdate) Set(val *IncidentUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentUpdate(val *IncidentUpdate) *NullableIncidentUpdate {
	return &NullableIncidentUpdate{value: val, isSet: true}
}

func (v NullableIncidentUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


