/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PageAccessUserMetricsApiService PageAccessUserMetricsApi service
type PageAccessUserMetricsApiService service

type ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics *DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics
}

func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics = &deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics
	return r
}

func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r)
}

/*
DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics Delete metrics for page access user

Delete metrics for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest
*/
func (a *PageAccessUserMetricsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics(ctx _context.Context, pageId string, pageAccessUserId string) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserMetricsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics == nil {
		return localVarReturnValue, nil, reportError("deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	metricId string
}


func (r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdExecute(r)
}

/*
DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId Delete metric for page access user

Delete metric for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @param metricId Identifier of metric requested
 @return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest
*/
func (a *PageAccessUserMetricsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId(ctx _context.Context, pageId string, pageAccessUserId string, metricId string) ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest {
	return ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
		metricId: metricId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserMetricsApiService) DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdExecute(r ApiDeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics/{metric_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"metric_id"+"}", _neturl.PathEscape(parameterToString(r.metricId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	page *int32
	perPage *int32
}

// Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Page(page int32) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.page = &page
	return r
}
// Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) PerPage(perPage int32) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Execute() ([]Metric, *_nethttp.Response, error) {
	return r.ApiService.GetPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r)
}

/*
GetPagesPageIdPageAccessUsersPageAccessUserIdMetrics Get metrics for page access user

Get metrics for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest
*/
func (a *PageAccessUserMetricsApiService) GetPagesPageIdPageAccessUsersPageAccessUserIdMetrics(ctx _context.Context, pageId string, pageAccessUserId string) ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	return ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return []Metric
func (a *PageAccessUserMetricsApiService) GetPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r ApiGetPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) ([]Metric, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Metric
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.GetPagesPageIdPageAccessUsersPageAccessUserIdMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics *PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics
}

func (r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics) ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics = &patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	return r
}

func (r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r)
}

/*
PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics Add metrics for page access user

Add metrics for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest
*/
func (a *PageAccessUserMetricsApiService) PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics(ctx _context.Context, pageId string, pageAccessUserId string) ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	return ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserMetricsApiService) PatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r ApiPatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics == nil {
		return localVarReturnValue, nil, reportError("patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	postPagesPageIdPageAccessUsersPageAccessUserIdMetrics *PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics
}

func (r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics(postPagesPageIdPageAccessUsersPageAccessUserIdMetrics PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics) ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.postPagesPageIdPageAccessUsersPageAccessUserIdMetrics = &postPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	return r
}

func (r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PostPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r)
}

/*
PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics Replace metrics for page access user

Replace metrics for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest
*/
func (a *PageAccessUserMetricsApiService) PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics(ctx _context.Context, pageId string, pageAccessUserId string) ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	return ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserMetricsApiService) PostPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r ApiPostPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.postPagesPageIdPageAccessUsersPageAccessUserIdMetrics == nil {
		return localVarReturnValue, nil, reportError("postPagesPageIdPageAccessUsersPageAccessUserIdMetrics is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest struct {
	ctx _context.Context
	ApiService *PageAccessUserMetricsApiService
	pageId string
	pageAccessUserId string
	putPagesPageIdPageAccessUsersPageAccessUserIdMetrics *PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics
}

func (r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics(putPagesPageIdPageAccessUsersPageAccessUserIdMetrics PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics) ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	r.putPagesPageIdPageAccessUsersPageAccessUserIdMetrics = &putPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	return r
}

func (r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) Execute() (PageAccessUser, *_nethttp.Response, error) {
	return r.ApiService.PutPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r)
}

/*
PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics Add metrics for page access user

Add metrics for page access user

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessUserId Page Access User Identifier
 @return ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest
*/
func (a *PageAccessUserMetricsApiService) PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics(ctx _context.Context, pageId string, pageAccessUserId string) ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest {
	return ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessUserId: pageAccessUserId,
	}
}

// Execute executes the request
//  @return PageAccessUser
func (a *PageAccessUserMetricsApiService) PutPagesPageIdPageAccessUsersPageAccessUserIdMetricsExecute(r ApiPutPagesPageIdPageAccessUsersPageAccessUserIdMetricsRequest) (PageAccessUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessUserMetricsApiService.PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_user_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.putPagesPageIdPageAccessUsersPageAccessUserIdMetrics == nil {
		return localVarReturnValue, nil, reportError("putPagesPageIdPageAccessUsersPageAccessUserIdMetrics is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putPagesPageIdPageAccessUsersPageAccessUserIdMetrics
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
