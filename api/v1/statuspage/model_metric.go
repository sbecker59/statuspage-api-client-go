/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Metric Create a metric for a metric provider
type Metric struct {
	// Metric identifier
	Id *string `json:"id,omitempty"`
	// Metric Provider identifier
	MetricsProviderId *string `json:"metrics_provider_id,omitempty"`
	// Metric Display identifier used to look up the metric data from the provider
	MetricIdentifier *string `json:"metric_identifier,omitempty"`
	// Name of metric
	Name *string `json:"name,omitempty"`
	// Should the metric be displayed
	Display *bool `json:"display,omitempty"`
	TooltipDescription *string `json:"tooltip_description,omitempty"`
	Backfilled *bool `json:"backfilled,omitempty"`
	YAxisMin *float32 `json:"y_axis_min,omitempty"`
	YAxisMax *float32 `json:"y_axis_max,omitempty"`
	// Should the values on the y axis be hidden on render
	YAxisHidden *bool `json:"y_axis_hidden,omitempty"`
	// Suffix to describe the units on the graph
	Suffix *string `json:"suffix,omitempty"`
	DecimalPlaces *int32 `json:"decimal_places,omitempty"`
	MostRecentDataAt *time.Time `json:"most_recent_data_at,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	LastFetchedAt *time.Time `json:"last_fetched_at,omitempty"`
	BackfillPercentage *int32 `json:"backfill_percentage,omitempty"`
	ReferenceName *string `json:"reference_name,omitempty"`
}

// NewMetric instantiates a new Metric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetric() *Metric {
	this := Metric{}
	return &this
}

// NewMetricWithDefaults instantiates a new Metric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricWithDefaults() *Metric {
	this := Metric{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Metric) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Metric) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Metric) SetId(v string) {
	o.Id = &v
}

// GetMetricsProviderId returns the MetricsProviderId field value if set, zero value otherwise.
func (o *Metric) GetMetricsProviderId() string {
	if o == nil || o.MetricsProviderId == nil {
		var ret string
		return ret
	}
	return *o.MetricsProviderId
}

// GetMetricsProviderIdOk returns a tuple with the MetricsProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetMetricsProviderIdOk() (*string, bool) {
	if o == nil || o.MetricsProviderId == nil {
		return nil, false
	}
	return o.MetricsProviderId, true
}

// HasMetricsProviderId returns a boolean if a field has been set.
func (o *Metric) HasMetricsProviderId() bool {
	if o != nil && o.MetricsProviderId != nil {
		return true
	}

	return false
}

// SetMetricsProviderId gets a reference to the given string and assigns it to the MetricsProviderId field.
func (o *Metric) SetMetricsProviderId(v string) {
	o.MetricsProviderId = &v
}

// GetMetricIdentifier returns the MetricIdentifier field value if set, zero value otherwise.
func (o *Metric) GetMetricIdentifier() string {
	if o == nil || o.MetricIdentifier == nil {
		var ret string
		return ret
	}
	return *o.MetricIdentifier
}

// GetMetricIdentifierOk returns a tuple with the MetricIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetMetricIdentifierOk() (*string, bool) {
	if o == nil || o.MetricIdentifier == nil {
		return nil, false
	}
	return o.MetricIdentifier, true
}

// HasMetricIdentifier returns a boolean if a field has been set.
func (o *Metric) HasMetricIdentifier() bool {
	if o != nil && o.MetricIdentifier != nil {
		return true
	}

	return false
}

// SetMetricIdentifier gets a reference to the given string and assigns it to the MetricIdentifier field.
func (o *Metric) SetMetricIdentifier(v string) {
	o.MetricIdentifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Metric) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Metric) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Metric) SetName(v string) {
	o.Name = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Metric) GetDisplay() bool {
	if o == nil || o.Display == nil {
		var ret bool
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetDisplayOk() (*bool, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Metric) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given bool and assigns it to the Display field.
func (o *Metric) SetDisplay(v bool) {
	o.Display = &v
}

// GetTooltipDescription returns the TooltipDescription field value if set, zero value otherwise.
func (o *Metric) GetTooltipDescription() string {
	if o == nil || o.TooltipDescription == nil {
		var ret string
		return ret
	}
	return *o.TooltipDescription
}

// GetTooltipDescriptionOk returns a tuple with the TooltipDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetTooltipDescriptionOk() (*string, bool) {
	if o == nil || o.TooltipDescription == nil {
		return nil, false
	}
	return o.TooltipDescription, true
}

// HasTooltipDescription returns a boolean if a field has been set.
func (o *Metric) HasTooltipDescription() bool {
	if o != nil && o.TooltipDescription != nil {
		return true
	}

	return false
}

// SetTooltipDescription gets a reference to the given string and assigns it to the TooltipDescription field.
func (o *Metric) SetTooltipDescription(v string) {
	o.TooltipDescription = &v
}

// GetBackfilled returns the Backfilled field value if set, zero value otherwise.
func (o *Metric) GetBackfilled() bool {
	if o == nil || o.Backfilled == nil {
		var ret bool
		return ret
	}
	return *o.Backfilled
}

// GetBackfilledOk returns a tuple with the Backfilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetBackfilledOk() (*bool, bool) {
	if o == nil || o.Backfilled == nil {
		return nil, false
	}
	return o.Backfilled, true
}

// HasBackfilled returns a boolean if a field has been set.
func (o *Metric) HasBackfilled() bool {
	if o != nil && o.Backfilled != nil {
		return true
	}

	return false
}

// SetBackfilled gets a reference to the given bool and assigns it to the Backfilled field.
func (o *Metric) SetBackfilled(v bool) {
	o.Backfilled = &v
}

// GetYAxisMin returns the YAxisMin field value if set, zero value otherwise.
func (o *Metric) GetYAxisMin() float32 {
	if o == nil || o.YAxisMin == nil {
		var ret float32
		return ret
	}
	return *o.YAxisMin
}

// GetYAxisMinOk returns a tuple with the YAxisMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetYAxisMinOk() (*float32, bool) {
	if o == nil || o.YAxisMin == nil {
		return nil, false
	}
	return o.YAxisMin, true
}

// HasYAxisMin returns a boolean if a field has been set.
func (o *Metric) HasYAxisMin() bool {
	if o != nil && o.YAxisMin != nil {
		return true
	}

	return false
}

// SetYAxisMin gets a reference to the given float32 and assigns it to the YAxisMin field.
func (o *Metric) SetYAxisMin(v float32) {
	o.YAxisMin = &v
}

// GetYAxisMax returns the YAxisMax field value if set, zero value otherwise.
func (o *Metric) GetYAxisMax() float32 {
	if o == nil || o.YAxisMax == nil {
		var ret float32
		return ret
	}
	return *o.YAxisMax
}

// GetYAxisMaxOk returns a tuple with the YAxisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetYAxisMaxOk() (*float32, bool) {
	if o == nil || o.YAxisMax == nil {
		return nil, false
	}
	return o.YAxisMax, true
}

// HasYAxisMax returns a boolean if a field has been set.
func (o *Metric) HasYAxisMax() bool {
	if o != nil && o.YAxisMax != nil {
		return true
	}

	return false
}

// SetYAxisMax gets a reference to the given float32 and assigns it to the YAxisMax field.
func (o *Metric) SetYAxisMax(v float32) {
	o.YAxisMax = &v
}

// GetYAxisHidden returns the YAxisHidden field value if set, zero value otherwise.
func (o *Metric) GetYAxisHidden() bool {
	if o == nil || o.YAxisHidden == nil {
		var ret bool
		return ret
	}
	return *o.YAxisHidden
}

// GetYAxisHiddenOk returns a tuple with the YAxisHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetYAxisHiddenOk() (*bool, bool) {
	if o == nil || o.YAxisHidden == nil {
		return nil, false
	}
	return o.YAxisHidden, true
}

// HasYAxisHidden returns a boolean if a field has been set.
func (o *Metric) HasYAxisHidden() bool {
	if o != nil && o.YAxisHidden != nil {
		return true
	}

	return false
}

// SetYAxisHidden gets a reference to the given bool and assigns it to the YAxisHidden field.
func (o *Metric) SetYAxisHidden(v bool) {
	o.YAxisHidden = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *Metric) GetSuffix() string {
	if o == nil || o.Suffix == nil {
		var ret string
		return ret
	}
	return *o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetSuffixOk() (*string, bool) {
	if o == nil || o.Suffix == nil {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *Metric) HasSuffix() bool {
	if o != nil && o.Suffix != nil {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given string and assigns it to the Suffix field.
func (o *Metric) SetSuffix(v string) {
	o.Suffix = &v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *Metric) GetDecimalPlaces() int32 {
	if o == nil || o.DecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.DecimalPlaces == nil {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *Metric) HasDecimalPlaces() bool {
	if o != nil && o.DecimalPlaces != nil {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *Metric) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

// GetMostRecentDataAt returns the MostRecentDataAt field value if set, zero value otherwise.
func (o *Metric) GetMostRecentDataAt() time.Time {
	if o == nil || o.MostRecentDataAt == nil {
		var ret time.Time
		return ret
	}
	return *o.MostRecentDataAt
}

// GetMostRecentDataAtOk returns a tuple with the MostRecentDataAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetMostRecentDataAtOk() (*time.Time, bool) {
	if o == nil || o.MostRecentDataAt == nil {
		return nil, false
	}
	return o.MostRecentDataAt, true
}

// HasMostRecentDataAt returns a boolean if a field has been set.
func (o *Metric) HasMostRecentDataAt() bool {
	if o != nil && o.MostRecentDataAt != nil {
		return true
	}

	return false
}

// SetMostRecentDataAt gets a reference to the given time.Time and assigns it to the MostRecentDataAt field.
func (o *Metric) SetMostRecentDataAt(v time.Time) {
	o.MostRecentDataAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Metric) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Metric) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Metric) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Metric) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Metric) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Metric) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLastFetchedAt returns the LastFetchedAt field value if set, zero value otherwise.
func (o *Metric) GetLastFetchedAt() time.Time {
	if o == nil || o.LastFetchedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.LastFetchedAt
}

// GetLastFetchedAtOk returns a tuple with the LastFetchedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetLastFetchedAtOk() (*time.Time, bool) {
	if o == nil || o.LastFetchedAt == nil {
		return nil, false
	}
	return o.LastFetchedAt, true
}

// HasLastFetchedAt returns a boolean if a field has been set.
func (o *Metric) HasLastFetchedAt() bool {
	if o != nil && o.LastFetchedAt != nil {
		return true
	}

	return false
}

// SetLastFetchedAt gets a reference to the given time.Time and assigns it to the LastFetchedAt field.
func (o *Metric) SetLastFetchedAt(v time.Time) {
	o.LastFetchedAt = &v
}

// GetBackfillPercentage returns the BackfillPercentage field value if set, zero value otherwise.
func (o *Metric) GetBackfillPercentage() int32 {
	if o == nil || o.BackfillPercentage == nil {
		var ret int32
		return ret
	}
	return *o.BackfillPercentage
}

// GetBackfillPercentageOk returns a tuple with the BackfillPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetBackfillPercentageOk() (*int32, bool) {
	if o == nil || o.BackfillPercentage == nil {
		return nil, false
	}
	return o.BackfillPercentage, true
}

// HasBackfillPercentage returns a boolean if a field has been set.
func (o *Metric) HasBackfillPercentage() bool {
	if o != nil && o.BackfillPercentage != nil {
		return true
	}

	return false
}

// SetBackfillPercentage gets a reference to the given int32 and assigns it to the BackfillPercentage field.
func (o *Metric) SetBackfillPercentage(v int32) {
	o.BackfillPercentage = &v
}

// GetReferenceName returns the ReferenceName field value if set, zero value otherwise.
func (o *Metric) GetReferenceName() string {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret
	}
	return *o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metric) GetReferenceNameOk() (*string, bool) {
	if o == nil || o.ReferenceName == nil {
		return nil, false
	}
	return o.ReferenceName, true
}

// HasReferenceName returns a boolean if a field has been set.
func (o *Metric) HasReferenceName() bool {
	if o != nil && o.ReferenceName != nil {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given string and assigns it to the ReferenceName field.
func (o *Metric) SetReferenceName(v string) {
	o.ReferenceName = &v
}

func (o Metric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MetricsProviderId != nil {
		toSerialize["metrics_provider_id"] = o.MetricsProviderId
	}
	if o.MetricIdentifier != nil {
		toSerialize["metric_identifier"] = o.MetricIdentifier
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.TooltipDescription != nil {
		toSerialize["tooltip_description"] = o.TooltipDescription
	}
	if o.Backfilled != nil {
		toSerialize["backfilled"] = o.Backfilled
	}
	if o.YAxisMin != nil {
		toSerialize["y_axis_min"] = o.YAxisMin
	}
	if o.YAxisMax != nil {
		toSerialize["y_axis_max"] = o.YAxisMax
	}
	if o.YAxisHidden != nil {
		toSerialize["y_axis_hidden"] = o.YAxisHidden
	}
	if o.Suffix != nil {
		toSerialize["suffix"] = o.Suffix
	}
	if o.DecimalPlaces != nil {
		toSerialize["decimal_places"] = o.DecimalPlaces
	}
	if o.MostRecentDataAt != nil {
		toSerialize["most_recent_data_at"] = o.MostRecentDataAt
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.LastFetchedAt != nil {
		toSerialize["last_fetched_at"] = o.LastFetchedAt
	}
	if o.BackfillPercentage != nil {
		toSerialize["backfill_percentage"] = o.BackfillPercentage
	}
	if o.ReferenceName != nil {
		toSerialize["reference_name"] = o.ReferenceName
	}
	return json.Marshal(toSerialize)
}

type NullableMetric struct {
	value *Metric
	isSet bool
}

func (v NullableMetric) Get() *Metric {
	return v.value
}

func (v *NullableMetric) Set(val *Metric) {
	v.value = val
	v.isSet = true
}

func (v NullableMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetric(val *Metric) *NullableMetric {
	return &NullableMetric{value: val, isSet: true}
}

func (v NullableMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


