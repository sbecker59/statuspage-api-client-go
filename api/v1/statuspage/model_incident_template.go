/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IncidentTemplate Get a list of templates
type IncidentTemplate struct {
	// Incident Template Identifier
	Id *string `json:"id,omitempty"`
	// Affected components
	Components *[]Component `json:"components,omitempty"`
	// Name of the template, as shown in the list on the \"Templates\" tab of the \"Incidents\" page
	Name *string `json:"name,omitempty"`
	// Title to be applied to the incident or maintenance when selecting this template
	Title *string `json:"title,omitempty"`
	// Body of the incident or maintenance update to be applied when selecting this template
	Body *string `json:"body,omitempty"`
	// Identifier of Template Group this template belongs to
	GroupId *string `json:"group_id,omitempty"`
	// The status the incident or maintenance should transition to when selecting this template
	UpdateStatus *string `json:"update_status,omitempty"`
	// Whether the \"tweet update\" checkbox should be selected when selecting this template
	ShouldTweet *bool `json:"should_tweet,omitempty"`
	// Whether the \"deliver notifications\" checkbox should be selected when selecting this template
	ShouldSendNotifications *bool `json:"should_send_notifications,omitempty"`
}

// NewIncidentTemplate instantiates a new IncidentTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentTemplate() *IncidentTemplate {
	this := IncidentTemplate{}
	return &this
}

// NewIncidentTemplateWithDefaults instantiates a new IncidentTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentTemplateWithDefaults() *IncidentTemplate {
	this := IncidentTemplate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentTemplate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentTemplate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IncidentTemplate) SetId(v string) {
	o.Id = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *IncidentTemplate) GetComponents() []Component {
	if o == nil || o.Components == nil {
		var ret []Component
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetComponentsOk() (*[]Component, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *IncidentTemplate) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []Component and assigns it to the Components field.
func (o *IncidentTemplate) SetComponents(v []Component) {
	o.Components = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IncidentTemplate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IncidentTemplate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IncidentTemplate) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IncidentTemplate) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IncidentTemplate) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *IncidentTemplate) SetTitle(v string) {
	o.Title = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *IncidentTemplate) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *IncidentTemplate) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *IncidentTemplate) SetBody(v string) {
	o.Body = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *IncidentTemplate) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *IncidentTemplate) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *IncidentTemplate) SetGroupId(v string) {
	o.GroupId = &v
}

// GetUpdateStatus returns the UpdateStatus field value if set, zero value otherwise.
func (o *IncidentTemplate) GetUpdateStatus() string {
	if o == nil || o.UpdateStatus == nil {
		var ret string
		return ret
	}
	return *o.UpdateStatus
}

// GetUpdateStatusOk returns a tuple with the UpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetUpdateStatusOk() (*string, bool) {
	if o == nil || o.UpdateStatus == nil {
		return nil, false
	}
	return o.UpdateStatus, true
}

// HasUpdateStatus returns a boolean if a field has been set.
func (o *IncidentTemplate) HasUpdateStatus() bool {
	if o != nil && o.UpdateStatus != nil {
		return true
	}

	return false
}

// SetUpdateStatus gets a reference to the given string and assigns it to the UpdateStatus field.
func (o *IncidentTemplate) SetUpdateStatus(v string) {
	o.UpdateStatus = &v
}

// GetShouldTweet returns the ShouldTweet field value if set, zero value otherwise.
func (o *IncidentTemplate) GetShouldTweet() bool {
	if o == nil || o.ShouldTweet == nil {
		var ret bool
		return ret
	}
	return *o.ShouldTweet
}

// GetShouldTweetOk returns a tuple with the ShouldTweet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetShouldTweetOk() (*bool, bool) {
	if o == nil || o.ShouldTweet == nil {
		return nil, false
	}
	return o.ShouldTweet, true
}

// HasShouldTweet returns a boolean if a field has been set.
func (o *IncidentTemplate) HasShouldTweet() bool {
	if o != nil && o.ShouldTweet != nil {
		return true
	}

	return false
}

// SetShouldTweet gets a reference to the given bool and assigns it to the ShouldTweet field.
func (o *IncidentTemplate) SetShouldTweet(v bool) {
	o.ShouldTweet = &v
}

// GetShouldSendNotifications returns the ShouldSendNotifications field value if set, zero value otherwise.
func (o *IncidentTemplate) GetShouldSendNotifications() bool {
	if o == nil || o.ShouldSendNotifications == nil {
		var ret bool
		return ret
	}
	return *o.ShouldSendNotifications
}

// GetShouldSendNotificationsOk returns a tuple with the ShouldSendNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentTemplate) GetShouldSendNotificationsOk() (*bool, bool) {
	if o == nil || o.ShouldSendNotifications == nil {
		return nil, false
	}
	return o.ShouldSendNotifications, true
}

// HasShouldSendNotifications returns a boolean if a field has been set.
func (o *IncidentTemplate) HasShouldSendNotifications() bool {
	if o != nil && o.ShouldSendNotifications != nil {
		return true
	}

	return false
}

// SetShouldSendNotifications gets a reference to the given bool and assigns it to the ShouldSendNotifications field.
func (o *IncidentTemplate) SetShouldSendNotifications(v bool) {
	o.ShouldSendNotifications = &v
}

func (o IncidentTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.UpdateStatus != nil {
		toSerialize["update_status"] = o.UpdateStatus
	}
	if o.ShouldTweet != nil {
		toSerialize["should_tweet"] = o.ShouldTweet
	}
	if o.ShouldSendNotifications != nil {
		toSerialize["should_send_notifications"] = o.ShouldSendNotifications
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentTemplate struct {
	value *IncidentTemplate
	isSet bool
}

func (v NullableIncidentTemplate) Get() *IncidentTemplate {
	return v.value
}

func (v *NullableIncidentTemplate) Set(val *IncidentTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentTemplate(val *IncidentTemplate) *NullableIncidentTemplate {
	return &NullableIncidentTemplate{value: val, isSet: true}
}

func (v NullableIncidentTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


