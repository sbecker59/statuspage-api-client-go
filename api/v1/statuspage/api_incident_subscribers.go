/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IncidentSubscribersApiService IncidentSubscribersApi service
type IncidentSubscribersApiService service

type ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest struct {
	ctx _context.Context
	ApiService *IncidentSubscribersApiService
	pageId string
	incidentId string
	subscriberId string
}


func (r ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest) Execute() (Subscriber, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdExecute(r)
}

/*
DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId Unsubscribe an incident subscriber

Unsubscribe an incident subscriber

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @param subscriberId Subscriber Identifier
 @return ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest
*/
func (a *IncidentSubscribersApiService) DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId(ctx _context.Context, pageId string, incidentId string, subscriberId string) ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest {
	return ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
		subscriberId: subscriberId,
	}
}

// Execute executes the request
//  @return Subscriber
func (a *IncidentSubscribersApiService) DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdExecute(r ApiDeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest) (Subscriber, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Subscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentSubscribersApiService.DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_id"+"}", _neturl.PathEscape(parameterToString(r.subscriberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest struct {
	ctx _context.Context
	ApiService *IncidentSubscribersApiService
	pageId string
	incidentId string
	page *int32
	perPage *int32
}

// Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest) Page(page int32) ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest {
	r.page = &page
	return r
}
// Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest) PerPage(perPage int32) ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest) Execute() ([]Subscriber, *_nethttp.Response, error) {
	return r.ApiService.GetPagesPageIdIncidentsIncidentIdSubscribersExecute(r)
}

/*
GetPagesPageIdIncidentsIncidentIdSubscribers Get a list of incident subscribers

Get a list of incident subscribers

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @return ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest
*/
func (a *IncidentSubscribersApiService) GetPagesPageIdIncidentsIncidentIdSubscribers(ctx _context.Context, pageId string, incidentId string) ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest {
	return ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
	}
}

// Execute executes the request
//  @return []Subscriber
func (a *IncidentSubscribersApiService) GetPagesPageIdIncidentsIncidentIdSubscribersExecute(r ApiGetPagesPageIdIncidentsIncidentIdSubscribersRequest) ([]Subscriber, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Subscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentSubscribersApiService.GetPagesPageIdIncidentsIncidentIdSubscribers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/subscribers"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest struct {
	ctx _context.Context
	ApiService *IncidentSubscribersApiService
	pageId string
	incidentId string
	subscriberId string
}


func (r ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest) Execute() (Subscriber, *_nethttp.Response, error) {
	return r.ApiService.GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdExecute(r)
}

/*
GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberId Get an incident subscriber

Get an incident subscriber

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @param subscriberId Subscriber Identifier
 @return ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest
*/
func (a *IncidentSubscribersApiService) GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberId(ctx _context.Context, pageId string, incidentId string, subscriberId string) ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest {
	return ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
		subscriberId: subscriberId,
	}
}

// Execute executes the request
//  @return Subscriber
func (a *IncidentSubscribersApiService) GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdExecute(r ApiGetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdRequest) (Subscriber, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Subscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentSubscribersApiService.GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_id"+"}", _neturl.PathEscape(parameterToString(r.subscriberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest struct {
	ctx _context.Context
	ApiService *IncidentSubscribersApiService
	pageId string
	incidentId string
	postPagesPageIdIncidentsIncidentIdSubscribers *PostPagesPageIdIncidentsIncidentIdSubscribers
}

func (r ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest) PostPagesPageIdIncidentsIncidentIdSubscribers(postPagesPageIdIncidentsIncidentIdSubscribers PostPagesPageIdIncidentsIncidentIdSubscribers) ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest {
	r.postPagesPageIdIncidentsIncidentIdSubscribers = &postPagesPageIdIncidentsIncidentIdSubscribers
	return r
}

func (r ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest) Execute() (Subscriber, *_nethttp.Response, error) {
	return r.ApiService.PostPagesPageIdIncidentsIncidentIdSubscribersExecute(r)
}

/*
PostPagesPageIdIncidentsIncidentIdSubscribers Create an incident subscriber

Create an incident subscriber

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @return ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest
*/
func (a *IncidentSubscribersApiService) PostPagesPageIdIncidentsIncidentIdSubscribers(ctx _context.Context, pageId string, incidentId string) ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest {
	return ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
	}
}

// Execute executes the request
//  @return Subscriber
func (a *IncidentSubscribersApiService) PostPagesPageIdIncidentsIncidentIdSubscribersExecute(r ApiPostPagesPageIdIncidentsIncidentIdSubscribersRequest) (Subscriber, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Subscriber
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentSubscribersApiService.PostPagesPageIdIncidentsIncidentIdSubscribers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/subscribers"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.postPagesPageIdIncidentsIncidentIdSubscribers == nil {
		return localVarReturnValue, nil, reportError("postPagesPageIdIncidentsIncidentIdSubscribers is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postPagesPageIdIncidentsIncidentIdSubscribers
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest struct {
	ctx _context.Context
	ApiService *IncidentSubscribersApiService
	pageId string
	incidentId string
	subscriberId string
}


func (r ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationExecute(r)
}

/*
PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation Resend confirmation to an incident subscriber

Resend confirmation to an incident subscriber

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param incidentId Incident Identifier
 @param subscriberId Subscriber Identifier
 @return ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest
*/
func (a *IncidentSubscribersApiService) PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation(ctx _context.Context, pageId string, incidentId string, subscriberId string) ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest {
	return ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		incidentId: incidentId,
		subscriberId: subscriberId,
	}
}

// Execute executes the request
func (a *IncidentSubscribersApiService) PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationExecute(r ApiPostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IncidentSubscribersApiService.PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"incident_id"+"}", _neturl.PathEscape(parameterToString(r.incidentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_id"+"}", _neturl.PathEscape(parameterToString(r.subscriberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
