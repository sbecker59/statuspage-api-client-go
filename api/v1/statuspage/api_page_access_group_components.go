/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PageAccessGroupComponentsApiService PageAccessGroupComponentsApi service
type PageAccessGroupComponentsApiService service

type ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents *DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents
}

func (r ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents) ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents = &deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	return r
}

func (r ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Execute() (PageAccessGroup, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r)
}

/*
DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents Delete components for a page access group

Delete components for a page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @return ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest
*/
func (a *PageAccessGroupComponentsApiService) DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents(ctx _context.Context, pageId string, pageAccessGroupId string) ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	return ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
	}
}

// Execute executes the request
//  @return PageAccessGroup
func (a *PageAccessGroupComponentsApiService) DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) (PageAccessGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents == nil {
		return localVarReturnValue, nil, reportError("deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	componentId string
}


func (r ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest) Execute() (PageAccessGroup, *_nethttp.Response, error) {
	return r.ApiService.DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdExecute(r)
}

/*
DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId Remove a component from a page access group

Remove a component from a page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @param componentId Component identifier
 @return ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest
*/
func (a *PageAccessGroupComponentsApiService) DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId(ctx _context.Context, pageId string, pageAccessGroupId string, componentId string) ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest {
	return ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
		componentId: componentId,
	}
}

// Execute executes the request
//  @return PageAccessGroup
func (a *PageAccessGroupComponentsApiService) DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdExecute(r ApiDeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdRequest) (PageAccessGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components/{component_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"component_id"+"}", _neturl.PathEscape(parameterToString(r.componentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	page *int32
	perPage *int32
}

// Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Page(page int32) ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.page = &page
	return r
}
// Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.
func (r ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) PerPage(perPage int32) ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Execute() ([]Component, *_nethttp.Response, error) {
	return r.ApiService.GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r)
}

/*
GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponents List components for a page access group

List components for a page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @return ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest
*/
func (a *PageAccessGroupComponentsApiService) GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(ctx _context.Context, pageId string, pageAccessGroupId string) ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	return ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
	}
}

// Execute executes the request
//  @return []Component
func (a *PageAccessGroupComponentsApiService) GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r ApiGetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) ([]Component, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents *PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
}

func (r ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents = &patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	return r
}

func (r ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Execute() (PageAccessGroup, *_nethttp.Response, error) {
	return r.ApiService.PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r)
}

/*
PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents Add components to page access group

Add components to page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @return ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest
*/
func (a *PageAccessGroupComponentsApiService) PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(ctx _context.Context, pageId string, pageAccessGroupId string) ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	return ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
	}
}

// Execute executes the request
//  @return PageAccessGroup
func (a *PageAccessGroupComponentsApiService) PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r ApiPatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) (PageAccessGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == nil {
		return localVarReturnValue, nil, reportError("patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents *PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
}

func (r ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents = &postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	return r
}

func (r ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Execute() (PageAccessGroup, *_nethttp.Response, error) {
	return r.ApiService.PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r)
}

/*
PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents Replace components for a page access group

Replace components for a page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @return ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest
*/
func (a *PageAccessGroupComponentsApiService) PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(ctx _context.Context, pageId string, pageAccessGroupId string) ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	return ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
	}
}

// Execute executes the request
//  @return PageAccessGroup
func (a *PageAccessGroupComponentsApiService) PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r ApiPostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) (PageAccessGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == nil {
		return localVarReturnValue, nil, reportError("postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest struct {
	ctx _context.Context
	ApiService *PageAccessGroupComponentsApiService
	pageId string
	pageAccessGroupId string
	putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents *PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
}

func (r ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents) ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	r.putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents = &putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	return r
}

func (r ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) Execute() (PageAccessGroup, *_nethttp.Response, error) {
	return r.ApiService.PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r)
}

/*
PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents Add components to page access group

Add components to page access group

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId Page identifier
 @param pageAccessGroupId Page Access Group Identifier
 @return ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest
*/
func (a *PageAccessGroupComponentsApiService) PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents(ctx _context.Context, pageId string, pageAccessGroupId string) ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest {
	return ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
		pageAccessGroupId: pageAccessGroupId,
	}
}

// Execute executes the request
//  @return PageAccessGroup
func (a *PageAccessGroupComponentsApiService) PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsExecute(r ApiPutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsRequest) (PageAccessGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageAccessGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PageAccessGroupComponentsApiService.PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pages/{page_id}/page_access_groups/{page_access_group_id}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", _neturl.PathEscape(parameterToString(r.pageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"page_access_group_id"+"}", _neturl.PathEscape(parameterToString(r.pageAccessGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents == nil {
		return localVarReturnValue, nil, reportError("putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEntity
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
