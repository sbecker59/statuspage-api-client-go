/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchPagesPage struct for PatchPagesPage
type PatchPagesPage struct {
	// Name of your page to be displayed
	Name *string `json:"name,omitempty"`
	// CNAME alias for your status page
	Domain *string `json:"domain,omitempty"`
	// Subdomain at which to access your status page
	Subdomain *string `json:"subdomain,omitempty"`
	// Website of your page.  Clicking on your statuspage image will link here.
	Url *string `json:"url,omitempty"`
	// The main template your statuspage will use
	Branding *string `json:"branding,omitempty"`
	// CSS Color
	CssBodyBackgroundColor *string `json:"css_body_background_color,omitempty"`
	// CSS Color
	CssFontColor *string `json:"css_font_color,omitempty"`
	// CSS Color
	CssLightFontColor *string `json:"css_light_font_color,omitempty"`
	// CSS Color
	CssGreens *string `json:"css_greens,omitempty"`
	// CSS Color
	CssYellows *string `json:"css_yellows,omitempty"`
	// CSS Color
	CssOranges *string `json:"css_oranges,omitempty"`
	// CSS Color
	CssReds *string `json:"css_reds,omitempty"`
	// CSS Color
	CssBlues *string `json:"css_blues,omitempty"`
	// CSS Color
	CssBorderColor *string `json:"css_border_color,omitempty"`
	// CSS Color
	CssGraphColor *string `json:"css_graph_color,omitempty"`
	// CSS Color
	CssLinkColor *string `json:"css_link_color,omitempty"`
	// CSS Color
	CssNoData *string `json:"css_no_data,omitempty"`
	// Should your page hide itself from search engines
	HiddenFromSearch *bool `json:"hidden_from_search,omitempty"`
	ViewersMustBeTeamMembers *bool `json:"viewers_must_be_team_members,omitempty"`
	// Can your users subscribe to all notifications on the page
	AllowPageSubscribers *bool `json:"allow_page_subscribers,omitempty"`
	// Can your users subscribe to notifications for a single incident
	AllowIncidentSubscribers *bool `json:"allow_incident_subscribers,omitempty"`
	// Can your users choose to receive notifications via email
	AllowEmailSubscribers *bool `json:"allow_email_subscribers,omitempty"`
	// Can your users choose to receive notifications via SMS
	AllowSmsSubscribers *bool `json:"allow_sms_subscribers,omitempty"`
	// Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)
	AllowRssAtomFeeds *bool `json:"allow_rss_atom_feeds,omitempty"`
	// Can your users choose to receive notifications via Webhooks
	AllowWebhookSubscribers *bool `json:"allow_webhook_subscribers,omitempty"`
	// Allows you to customize the email address your page notifications come from
	NotificationsFromEmail *string `json:"notifications_from_email,omitempty"`
	// Timezone configured for your page
	TimeZone *string `json:"time_zone,omitempty"`
	// Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting
	NotificationsEmailFooter *string `json:"notifications_email_footer,omitempty"`
}

// NewPatchPagesPage instantiates a new PatchPagesPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPagesPage() *PatchPagesPage {
	this := PatchPagesPage{}
	return &this
}

// NewPatchPagesPageWithDefaults instantiates a new PatchPagesPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPagesPageWithDefaults() *PatchPagesPage {
	this := PatchPagesPage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchPagesPage) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchPagesPage) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchPagesPage) SetName(v string) {
	o.Name = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *PatchPagesPage) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *PatchPagesPage) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *PatchPagesPage) SetDomain(v string) {
	o.Domain = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *PatchPagesPage) GetSubdomain() string {
	if o == nil || o.Subdomain == nil {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetSubdomainOk() (*string, bool) {
	if o == nil || o.Subdomain == nil {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *PatchPagesPage) HasSubdomain() bool {
	if o != nil && o.Subdomain != nil {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *PatchPagesPage) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchPagesPage) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchPagesPage) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchPagesPage) SetUrl(v string) {
	o.Url = &v
}

// GetBranding returns the Branding field value if set, zero value otherwise.
func (o *PatchPagesPage) GetBranding() string {
	if o == nil || o.Branding == nil {
		var ret string
		return ret
	}
	return *o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetBrandingOk() (*string, bool) {
	if o == nil || o.Branding == nil {
		return nil, false
	}
	return o.Branding, true
}

// HasBranding returns a boolean if a field has been set.
func (o *PatchPagesPage) HasBranding() bool {
	if o != nil && o.Branding != nil {
		return true
	}

	return false
}

// SetBranding gets a reference to the given string and assigns it to the Branding field.
func (o *PatchPagesPage) SetBranding(v string) {
	o.Branding = &v
}

// GetCssBodyBackgroundColor returns the CssBodyBackgroundColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssBodyBackgroundColor() string {
	if o == nil || o.CssBodyBackgroundColor == nil {
		var ret string
		return ret
	}
	return *o.CssBodyBackgroundColor
}

// GetCssBodyBackgroundColorOk returns a tuple with the CssBodyBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssBodyBackgroundColorOk() (*string, bool) {
	if o == nil || o.CssBodyBackgroundColor == nil {
		return nil, false
	}
	return o.CssBodyBackgroundColor, true
}

// HasCssBodyBackgroundColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssBodyBackgroundColor() bool {
	if o != nil && o.CssBodyBackgroundColor != nil {
		return true
	}

	return false
}

// SetCssBodyBackgroundColor gets a reference to the given string and assigns it to the CssBodyBackgroundColor field.
func (o *PatchPagesPage) SetCssBodyBackgroundColor(v string) {
	o.CssBodyBackgroundColor = &v
}

// GetCssFontColor returns the CssFontColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssFontColor() string {
	if o == nil || o.CssFontColor == nil {
		var ret string
		return ret
	}
	return *o.CssFontColor
}

// GetCssFontColorOk returns a tuple with the CssFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssFontColorOk() (*string, bool) {
	if o == nil || o.CssFontColor == nil {
		return nil, false
	}
	return o.CssFontColor, true
}

// HasCssFontColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssFontColor() bool {
	if o != nil && o.CssFontColor != nil {
		return true
	}

	return false
}

// SetCssFontColor gets a reference to the given string and assigns it to the CssFontColor field.
func (o *PatchPagesPage) SetCssFontColor(v string) {
	o.CssFontColor = &v
}

// GetCssLightFontColor returns the CssLightFontColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssLightFontColor() string {
	if o == nil || o.CssLightFontColor == nil {
		var ret string
		return ret
	}
	return *o.CssLightFontColor
}

// GetCssLightFontColorOk returns a tuple with the CssLightFontColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssLightFontColorOk() (*string, bool) {
	if o == nil || o.CssLightFontColor == nil {
		return nil, false
	}
	return o.CssLightFontColor, true
}

// HasCssLightFontColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssLightFontColor() bool {
	if o != nil && o.CssLightFontColor != nil {
		return true
	}

	return false
}

// SetCssLightFontColor gets a reference to the given string and assigns it to the CssLightFontColor field.
func (o *PatchPagesPage) SetCssLightFontColor(v string) {
	o.CssLightFontColor = &v
}

// GetCssGreens returns the CssGreens field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssGreens() string {
	if o == nil || o.CssGreens == nil {
		var ret string
		return ret
	}
	return *o.CssGreens
}

// GetCssGreensOk returns a tuple with the CssGreens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssGreensOk() (*string, bool) {
	if o == nil || o.CssGreens == nil {
		return nil, false
	}
	return o.CssGreens, true
}

// HasCssGreens returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssGreens() bool {
	if o != nil && o.CssGreens != nil {
		return true
	}

	return false
}

// SetCssGreens gets a reference to the given string and assigns it to the CssGreens field.
func (o *PatchPagesPage) SetCssGreens(v string) {
	o.CssGreens = &v
}

// GetCssYellows returns the CssYellows field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssYellows() string {
	if o == nil || o.CssYellows == nil {
		var ret string
		return ret
	}
	return *o.CssYellows
}

// GetCssYellowsOk returns a tuple with the CssYellows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssYellowsOk() (*string, bool) {
	if o == nil || o.CssYellows == nil {
		return nil, false
	}
	return o.CssYellows, true
}

// HasCssYellows returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssYellows() bool {
	if o != nil && o.CssYellows != nil {
		return true
	}

	return false
}

// SetCssYellows gets a reference to the given string and assigns it to the CssYellows field.
func (o *PatchPagesPage) SetCssYellows(v string) {
	o.CssYellows = &v
}

// GetCssOranges returns the CssOranges field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssOranges() string {
	if o == nil || o.CssOranges == nil {
		var ret string
		return ret
	}
	return *o.CssOranges
}

// GetCssOrangesOk returns a tuple with the CssOranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssOrangesOk() (*string, bool) {
	if o == nil || o.CssOranges == nil {
		return nil, false
	}
	return o.CssOranges, true
}

// HasCssOranges returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssOranges() bool {
	if o != nil && o.CssOranges != nil {
		return true
	}

	return false
}

// SetCssOranges gets a reference to the given string and assigns it to the CssOranges field.
func (o *PatchPagesPage) SetCssOranges(v string) {
	o.CssOranges = &v
}

// GetCssReds returns the CssReds field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssReds() string {
	if o == nil || o.CssReds == nil {
		var ret string
		return ret
	}
	return *o.CssReds
}

// GetCssRedsOk returns a tuple with the CssReds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssRedsOk() (*string, bool) {
	if o == nil || o.CssReds == nil {
		return nil, false
	}
	return o.CssReds, true
}

// HasCssReds returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssReds() bool {
	if o != nil && o.CssReds != nil {
		return true
	}

	return false
}

// SetCssReds gets a reference to the given string and assigns it to the CssReds field.
func (o *PatchPagesPage) SetCssReds(v string) {
	o.CssReds = &v
}

// GetCssBlues returns the CssBlues field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssBlues() string {
	if o == nil || o.CssBlues == nil {
		var ret string
		return ret
	}
	return *o.CssBlues
}

// GetCssBluesOk returns a tuple with the CssBlues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssBluesOk() (*string, bool) {
	if o == nil || o.CssBlues == nil {
		return nil, false
	}
	return o.CssBlues, true
}

// HasCssBlues returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssBlues() bool {
	if o != nil && o.CssBlues != nil {
		return true
	}

	return false
}

// SetCssBlues gets a reference to the given string and assigns it to the CssBlues field.
func (o *PatchPagesPage) SetCssBlues(v string) {
	o.CssBlues = &v
}

// GetCssBorderColor returns the CssBorderColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssBorderColor() string {
	if o == nil || o.CssBorderColor == nil {
		var ret string
		return ret
	}
	return *o.CssBorderColor
}

// GetCssBorderColorOk returns a tuple with the CssBorderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssBorderColorOk() (*string, bool) {
	if o == nil || o.CssBorderColor == nil {
		return nil, false
	}
	return o.CssBorderColor, true
}

// HasCssBorderColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssBorderColor() bool {
	if o != nil && o.CssBorderColor != nil {
		return true
	}

	return false
}

// SetCssBorderColor gets a reference to the given string and assigns it to the CssBorderColor field.
func (o *PatchPagesPage) SetCssBorderColor(v string) {
	o.CssBorderColor = &v
}

// GetCssGraphColor returns the CssGraphColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssGraphColor() string {
	if o == nil || o.CssGraphColor == nil {
		var ret string
		return ret
	}
	return *o.CssGraphColor
}

// GetCssGraphColorOk returns a tuple with the CssGraphColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssGraphColorOk() (*string, bool) {
	if o == nil || o.CssGraphColor == nil {
		return nil, false
	}
	return o.CssGraphColor, true
}

// HasCssGraphColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssGraphColor() bool {
	if o != nil && o.CssGraphColor != nil {
		return true
	}

	return false
}

// SetCssGraphColor gets a reference to the given string and assigns it to the CssGraphColor field.
func (o *PatchPagesPage) SetCssGraphColor(v string) {
	o.CssGraphColor = &v
}

// GetCssLinkColor returns the CssLinkColor field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssLinkColor() string {
	if o == nil || o.CssLinkColor == nil {
		var ret string
		return ret
	}
	return *o.CssLinkColor
}

// GetCssLinkColorOk returns a tuple with the CssLinkColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssLinkColorOk() (*string, bool) {
	if o == nil || o.CssLinkColor == nil {
		return nil, false
	}
	return o.CssLinkColor, true
}

// HasCssLinkColor returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssLinkColor() bool {
	if o != nil && o.CssLinkColor != nil {
		return true
	}

	return false
}

// SetCssLinkColor gets a reference to the given string and assigns it to the CssLinkColor field.
func (o *PatchPagesPage) SetCssLinkColor(v string) {
	o.CssLinkColor = &v
}

// GetCssNoData returns the CssNoData field value if set, zero value otherwise.
func (o *PatchPagesPage) GetCssNoData() string {
	if o == nil || o.CssNoData == nil {
		var ret string
		return ret
	}
	return *o.CssNoData
}

// GetCssNoDataOk returns a tuple with the CssNoData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetCssNoDataOk() (*string, bool) {
	if o == nil || o.CssNoData == nil {
		return nil, false
	}
	return o.CssNoData, true
}

// HasCssNoData returns a boolean if a field has been set.
func (o *PatchPagesPage) HasCssNoData() bool {
	if o != nil && o.CssNoData != nil {
		return true
	}

	return false
}

// SetCssNoData gets a reference to the given string and assigns it to the CssNoData field.
func (o *PatchPagesPage) SetCssNoData(v string) {
	o.CssNoData = &v
}

// GetHiddenFromSearch returns the HiddenFromSearch field value if set, zero value otherwise.
func (o *PatchPagesPage) GetHiddenFromSearch() bool {
	if o == nil || o.HiddenFromSearch == nil {
		var ret bool
		return ret
	}
	return *o.HiddenFromSearch
}

// GetHiddenFromSearchOk returns a tuple with the HiddenFromSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetHiddenFromSearchOk() (*bool, bool) {
	if o == nil || o.HiddenFromSearch == nil {
		return nil, false
	}
	return o.HiddenFromSearch, true
}

// HasHiddenFromSearch returns a boolean if a field has been set.
func (o *PatchPagesPage) HasHiddenFromSearch() bool {
	if o != nil && o.HiddenFromSearch != nil {
		return true
	}

	return false
}

// SetHiddenFromSearch gets a reference to the given bool and assigns it to the HiddenFromSearch field.
func (o *PatchPagesPage) SetHiddenFromSearch(v bool) {
	o.HiddenFromSearch = &v
}

// GetViewersMustBeTeamMembers returns the ViewersMustBeTeamMembers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetViewersMustBeTeamMembers() bool {
	if o == nil || o.ViewersMustBeTeamMembers == nil {
		var ret bool
		return ret
	}
	return *o.ViewersMustBeTeamMembers
}

// GetViewersMustBeTeamMembersOk returns a tuple with the ViewersMustBeTeamMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetViewersMustBeTeamMembersOk() (*bool, bool) {
	if o == nil || o.ViewersMustBeTeamMembers == nil {
		return nil, false
	}
	return o.ViewersMustBeTeamMembers, true
}

// HasViewersMustBeTeamMembers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasViewersMustBeTeamMembers() bool {
	if o != nil && o.ViewersMustBeTeamMembers != nil {
		return true
	}

	return false
}

// SetViewersMustBeTeamMembers gets a reference to the given bool and assigns it to the ViewersMustBeTeamMembers field.
func (o *PatchPagesPage) SetViewersMustBeTeamMembers(v bool) {
	o.ViewersMustBeTeamMembers = &v
}

// GetAllowPageSubscribers returns the AllowPageSubscribers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowPageSubscribers() bool {
	if o == nil || o.AllowPageSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.AllowPageSubscribers
}

// GetAllowPageSubscribersOk returns a tuple with the AllowPageSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowPageSubscribersOk() (*bool, bool) {
	if o == nil || o.AllowPageSubscribers == nil {
		return nil, false
	}
	return o.AllowPageSubscribers, true
}

// HasAllowPageSubscribers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowPageSubscribers() bool {
	if o != nil && o.AllowPageSubscribers != nil {
		return true
	}

	return false
}

// SetAllowPageSubscribers gets a reference to the given bool and assigns it to the AllowPageSubscribers field.
func (o *PatchPagesPage) SetAllowPageSubscribers(v bool) {
	o.AllowPageSubscribers = &v
}

// GetAllowIncidentSubscribers returns the AllowIncidentSubscribers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowIncidentSubscribers() bool {
	if o == nil || o.AllowIncidentSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.AllowIncidentSubscribers
}

// GetAllowIncidentSubscribersOk returns a tuple with the AllowIncidentSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowIncidentSubscribersOk() (*bool, bool) {
	if o == nil || o.AllowIncidentSubscribers == nil {
		return nil, false
	}
	return o.AllowIncidentSubscribers, true
}

// HasAllowIncidentSubscribers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowIncidentSubscribers() bool {
	if o != nil && o.AllowIncidentSubscribers != nil {
		return true
	}

	return false
}

// SetAllowIncidentSubscribers gets a reference to the given bool and assigns it to the AllowIncidentSubscribers field.
func (o *PatchPagesPage) SetAllowIncidentSubscribers(v bool) {
	o.AllowIncidentSubscribers = &v
}

// GetAllowEmailSubscribers returns the AllowEmailSubscribers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowEmailSubscribers() bool {
	if o == nil || o.AllowEmailSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.AllowEmailSubscribers
}

// GetAllowEmailSubscribersOk returns a tuple with the AllowEmailSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowEmailSubscribersOk() (*bool, bool) {
	if o == nil || o.AllowEmailSubscribers == nil {
		return nil, false
	}
	return o.AllowEmailSubscribers, true
}

// HasAllowEmailSubscribers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowEmailSubscribers() bool {
	if o != nil && o.AllowEmailSubscribers != nil {
		return true
	}

	return false
}

// SetAllowEmailSubscribers gets a reference to the given bool and assigns it to the AllowEmailSubscribers field.
func (o *PatchPagesPage) SetAllowEmailSubscribers(v bool) {
	o.AllowEmailSubscribers = &v
}

// GetAllowSmsSubscribers returns the AllowSmsSubscribers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowSmsSubscribers() bool {
	if o == nil || o.AllowSmsSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.AllowSmsSubscribers
}

// GetAllowSmsSubscribersOk returns a tuple with the AllowSmsSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowSmsSubscribersOk() (*bool, bool) {
	if o == nil || o.AllowSmsSubscribers == nil {
		return nil, false
	}
	return o.AllowSmsSubscribers, true
}

// HasAllowSmsSubscribers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowSmsSubscribers() bool {
	if o != nil && o.AllowSmsSubscribers != nil {
		return true
	}

	return false
}

// SetAllowSmsSubscribers gets a reference to the given bool and assigns it to the AllowSmsSubscribers field.
func (o *PatchPagesPage) SetAllowSmsSubscribers(v bool) {
	o.AllowSmsSubscribers = &v
}

// GetAllowRssAtomFeeds returns the AllowRssAtomFeeds field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowRssAtomFeeds() bool {
	if o == nil || o.AllowRssAtomFeeds == nil {
		var ret bool
		return ret
	}
	return *o.AllowRssAtomFeeds
}

// GetAllowRssAtomFeedsOk returns a tuple with the AllowRssAtomFeeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowRssAtomFeedsOk() (*bool, bool) {
	if o == nil || o.AllowRssAtomFeeds == nil {
		return nil, false
	}
	return o.AllowRssAtomFeeds, true
}

// HasAllowRssAtomFeeds returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowRssAtomFeeds() bool {
	if o != nil && o.AllowRssAtomFeeds != nil {
		return true
	}

	return false
}

// SetAllowRssAtomFeeds gets a reference to the given bool and assigns it to the AllowRssAtomFeeds field.
func (o *PatchPagesPage) SetAllowRssAtomFeeds(v bool) {
	o.AllowRssAtomFeeds = &v
}

// GetAllowWebhookSubscribers returns the AllowWebhookSubscribers field value if set, zero value otherwise.
func (o *PatchPagesPage) GetAllowWebhookSubscribers() bool {
	if o == nil || o.AllowWebhookSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.AllowWebhookSubscribers
}

// GetAllowWebhookSubscribersOk returns a tuple with the AllowWebhookSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetAllowWebhookSubscribersOk() (*bool, bool) {
	if o == nil || o.AllowWebhookSubscribers == nil {
		return nil, false
	}
	return o.AllowWebhookSubscribers, true
}

// HasAllowWebhookSubscribers returns a boolean if a field has been set.
func (o *PatchPagesPage) HasAllowWebhookSubscribers() bool {
	if o != nil && o.AllowWebhookSubscribers != nil {
		return true
	}

	return false
}

// SetAllowWebhookSubscribers gets a reference to the given bool and assigns it to the AllowWebhookSubscribers field.
func (o *PatchPagesPage) SetAllowWebhookSubscribers(v bool) {
	o.AllowWebhookSubscribers = &v
}

// GetNotificationsFromEmail returns the NotificationsFromEmail field value if set, zero value otherwise.
func (o *PatchPagesPage) GetNotificationsFromEmail() string {
	if o == nil || o.NotificationsFromEmail == nil {
		var ret string
		return ret
	}
	return *o.NotificationsFromEmail
}

// GetNotificationsFromEmailOk returns a tuple with the NotificationsFromEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetNotificationsFromEmailOk() (*string, bool) {
	if o == nil || o.NotificationsFromEmail == nil {
		return nil, false
	}
	return o.NotificationsFromEmail, true
}

// HasNotificationsFromEmail returns a boolean if a field has been set.
func (o *PatchPagesPage) HasNotificationsFromEmail() bool {
	if o != nil && o.NotificationsFromEmail != nil {
		return true
	}

	return false
}

// SetNotificationsFromEmail gets a reference to the given string and assigns it to the NotificationsFromEmail field.
func (o *PatchPagesPage) SetNotificationsFromEmail(v string) {
	o.NotificationsFromEmail = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *PatchPagesPage) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *PatchPagesPage) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *PatchPagesPage) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetNotificationsEmailFooter returns the NotificationsEmailFooter field value if set, zero value otherwise.
func (o *PatchPagesPage) GetNotificationsEmailFooter() string {
	if o == nil || o.NotificationsEmailFooter == nil {
		var ret string
		return ret
	}
	return *o.NotificationsEmailFooter
}

// GetNotificationsEmailFooterOk returns a tuple with the NotificationsEmailFooter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPagesPage) GetNotificationsEmailFooterOk() (*string, bool) {
	if o == nil || o.NotificationsEmailFooter == nil {
		return nil, false
	}
	return o.NotificationsEmailFooter, true
}

// HasNotificationsEmailFooter returns a boolean if a field has been set.
func (o *PatchPagesPage) HasNotificationsEmailFooter() bool {
	if o != nil && o.NotificationsEmailFooter != nil {
		return true
	}

	return false
}

// SetNotificationsEmailFooter gets a reference to the given string and assigns it to the NotificationsEmailFooter field.
func (o *PatchPagesPage) SetNotificationsEmailFooter(v string) {
	o.NotificationsEmailFooter = &v
}

func (o PatchPagesPage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Subdomain != nil {
		toSerialize["subdomain"] = o.Subdomain
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Branding != nil {
		toSerialize["branding"] = o.Branding
	}
	if o.CssBodyBackgroundColor != nil {
		toSerialize["css_body_background_color"] = o.CssBodyBackgroundColor
	}
	if o.CssFontColor != nil {
		toSerialize["css_font_color"] = o.CssFontColor
	}
	if o.CssLightFontColor != nil {
		toSerialize["css_light_font_color"] = o.CssLightFontColor
	}
	if o.CssGreens != nil {
		toSerialize["css_greens"] = o.CssGreens
	}
	if o.CssYellows != nil {
		toSerialize["css_yellows"] = o.CssYellows
	}
	if o.CssOranges != nil {
		toSerialize["css_oranges"] = o.CssOranges
	}
	if o.CssReds != nil {
		toSerialize["css_reds"] = o.CssReds
	}
	if o.CssBlues != nil {
		toSerialize["css_blues"] = o.CssBlues
	}
	if o.CssBorderColor != nil {
		toSerialize["css_border_color"] = o.CssBorderColor
	}
	if o.CssGraphColor != nil {
		toSerialize["css_graph_color"] = o.CssGraphColor
	}
	if o.CssLinkColor != nil {
		toSerialize["css_link_color"] = o.CssLinkColor
	}
	if o.CssNoData != nil {
		toSerialize["css_no_data"] = o.CssNoData
	}
	if o.HiddenFromSearch != nil {
		toSerialize["hidden_from_search"] = o.HiddenFromSearch
	}
	if o.ViewersMustBeTeamMembers != nil {
		toSerialize["viewers_must_be_team_members"] = o.ViewersMustBeTeamMembers
	}
	if o.AllowPageSubscribers != nil {
		toSerialize["allow_page_subscribers"] = o.AllowPageSubscribers
	}
	if o.AllowIncidentSubscribers != nil {
		toSerialize["allow_incident_subscribers"] = o.AllowIncidentSubscribers
	}
	if o.AllowEmailSubscribers != nil {
		toSerialize["allow_email_subscribers"] = o.AllowEmailSubscribers
	}
	if o.AllowSmsSubscribers != nil {
		toSerialize["allow_sms_subscribers"] = o.AllowSmsSubscribers
	}
	if o.AllowRssAtomFeeds != nil {
		toSerialize["allow_rss_atom_feeds"] = o.AllowRssAtomFeeds
	}
	if o.AllowWebhookSubscribers != nil {
		toSerialize["allow_webhook_subscribers"] = o.AllowWebhookSubscribers
	}
	if o.NotificationsFromEmail != nil {
		toSerialize["notifications_from_email"] = o.NotificationsFromEmail
	}
	if o.TimeZone != nil {
		toSerialize["time_zone"] = o.TimeZone
	}
	if o.NotificationsEmailFooter != nil {
		toSerialize["notifications_email_footer"] = o.NotificationsEmailFooter
	}
	return json.Marshal(toSerialize)
}

type NullablePatchPagesPage struct {
	value *PatchPagesPage
	isSet bool
}

func (v NullablePatchPagesPage) Get() *PatchPagesPage {
	return v.value
}

func (v *NullablePatchPagesPage) Set(val *PatchPagesPage) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPagesPage) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPagesPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPagesPage(val *PatchPagesPage) *NullablePatchPagesPage {
	return &NullablePatchPagesPage{value: val, isSet: true}
}

func (v NullablePatchPagesPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPagesPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


