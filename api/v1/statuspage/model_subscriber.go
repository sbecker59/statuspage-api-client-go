/*
Statuspage API

# Code of Conduct Please don't abuse the API, and please report all feature requests and issues to https://support.atlassian.com/contact  # Rate Limiting Each API token is limited to 1 request / second as measured on a 60 second rolling window. To get this limit increased, please contact us at https://support.atlassian.com/contact  Error codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.  # Basics  ## HTTPS It's required  ## URL Prefix In order to maintain version integrity into the future, the API is versioned. All calls currently begin with the following prefix:    https://api.statuspage.io/v1/  ## RESTful Interface Wherever possible, the API seeks to implement repeatable patterns with logical, representative URLs and descriptive HTTP verbs. Below are some examples and conventions you will see throughout the documentation.  * Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json * Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json * GET will retrieve information about a collection/element * POST will create an element in a collection * PATCH will update a single element * PUT will replace a single element in a collection (rarely used) * DELETE will destroy a single element  ## Sending Data Information can be sent in the body as form urlencoded or JSON, but make sure the Content-Type header matches the body structure or the server gremlins will be angry.  All examples are provided in JSON format, however they can easily be converted to form encoding if required.  Some examples of how to convert things are below:      // JSON     {       \"incident\": {         \"name\": \"test incident\",         \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]       }     }      // Form Encoded (using curl as an example):     curl -X POST https://api.statuspage.io/v1/example \\       -d \"incident[name]=test incident\" \\       -d \"incident[components][]=8kbf7d35c070\" \\       -d \"incident[components][]=vtnh60py4yd7\"  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Subscriber Get an incident subscriber
type Subscriber struct {
	// Subscriber Identifier
	Id *string `json:"id,omitempty"`
	// If this is true, do not notify the user with changes to their subscription.
	SkipConfirmationNotification *bool `json:"skip_confirmation_notification,omitempty"`
	// The communication mode of the subscriber.
	Mode *string `json:"mode,omitempty"`
	// The email address to use to contact the subscriber. Used for Email and Webhook subscribers.
	Email *string `json:"email,omitempty"`
	// The URL where a webhook subscriber elects to receive updates.
	Endpoint *string `json:"endpoint,omitempty"`
	// The phone number used to contact an SMS subscriber
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The two-character country code representing the country of which the phone_number is a part.
	PhoneCountry *string `json:"phone_country,omitempty"`
	// A formatted version of the phone_number and phone_country pair, nicely formatted for display.
	DisplayPhoneNumber *string `json:"display_phone_number,omitempty"`
	// Obfuscated slack channel name
	ObfuscatedChannelName *string `json:"obfuscated_channel_name,omitempty"`
	// The workspace name of the slack subscriber.
	WorkspaceName *string `json:"workspace_name,omitempty"`
	// The timestamp when the subscriber was quarantined due to an issue reaching them.
	QuarantinedAt *time.Time `json:"quarantined_at,omitempty"`
	// The timestamp when a quarantined subscriber will be purged (unsubscribed).
	PurgeAt *time.Time `json:"purge_at,omitempty"`
	// The components for which the subscriber has elected to receive updates.
	Components *string `json:"components,omitempty"`
	// The Page Access user this subscriber belongs to (only for audience-specific pages).
	PageAccessUserId *string `json:"page_access_user_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewSubscriber instantiates a new Subscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriber() *Subscriber {
	this := Subscriber{}
	return &this
}

// NewSubscriberWithDefaults instantiates a new Subscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberWithDefaults() *Subscriber {
	this := Subscriber{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subscriber) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Subscriber) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Subscriber) SetId(v string) {
	o.Id = &v
}

// GetSkipConfirmationNotification returns the SkipConfirmationNotification field value if set, zero value otherwise.
func (o *Subscriber) GetSkipConfirmationNotification() bool {
	if o == nil || o.SkipConfirmationNotification == nil {
		var ret bool
		return ret
	}
	return *o.SkipConfirmationNotification
}

// GetSkipConfirmationNotificationOk returns a tuple with the SkipConfirmationNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSkipConfirmationNotificationOk() (*bool, bool) {
	if o == nil || o.SkipConfirmationNotification == nil {
		return nil, false
	}
	return o.SkipConfirmationNotification, true
}

// HasSkipConfirmationNotification returns a boolean if a field has been set.
func (o *Subscriber) HasSkipConfirmationNotification() bool {
	if o != nil && o.SkipConfirmationNotification != nil {
		return true
	}

	return false
}

// SetSkipConfirmationNotification gets a reference to the given bool and assigns it to the SkipConfirmationNotification field.
func (o *Subscriber) SetSkipConfirmationNotification(v bool) {
	o.SkipConfirmationNotification = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Subscriber) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Subscriber) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *Subscriber) SetMode(v string) {
	o.Mode = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Subscriber) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Subscriber) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Subscriber) SetEmail(v string) {
	o.Email = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *Subscriber) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *Subscriber) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *Subscriber) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *Subscriber) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *Subscriber) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *Subscriber) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneCountry returns the PhoneCountry field value if set, zero value otherwise.
func (o *Subscriber) GetPhoneCountry() string {
	if o == nil || o.PhoneCountry == nil {
		var ret string
		return ret
	}
	return *o.PhoneCountry
}

// GetPhoneCountryOk returns a tuple with the PhoneCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPhoneCountryOk() (*string, bool) {
	if o == nil || o.PhoneCountry == nil {
		return nil, false
	}
	return o.PhoneCountry, true
}

// HasPhoneCountry returns a boolean if a field has been set.
func (o *Subscriber) HasPhoneCountry() bool {
	if o != nil && o.PhoneCountry != nil {
		return true
	}

	return false
}

// SetPhoneCountry gets a reference to the given string and assigns it to the PhoneCountry field.
func (o *Subscriber) SetPhoneCountry(v string) {
	o.PhoneCountry = &v
}

// GetDisplayPhoneNumber returns the DisplayPhoneNumber field value if set, zero value otherwise.
func (o *Subscriber) GetDisplayPhoneNumber() string {
	if o == nil || o.DisplayPhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.DisplayPhoneNumber
}

// GetDisplayPhoneNumberOk returns a tuple with the DisplayPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetDisplayPhoneNumberOk() (*string, bool) {
	if o == nil || o.DisplayPhoneNumber == nil {
		return nil, false
	}
	return o.DisplayPhoneNumber, true
}

// HasDisplayPhoneNumber returns a boolean if a field has been set.
func (o *Subscriber) HasDisplayPhoneNumber() bool {
	if o != nil && o.DisplayPhoneNumber != nil {
		return true
	}

	return false
}

// SetDisplayPhoneNumber gets a reference to the given string and assigns it to the DisplayPhoneNumber field.
func (o *Subscriber) SetDisplayPhoneNumber(v string) {
	o.DisplayPhoneNumber = &v
}

// GetObfuscatedChannelName returns the ObfuscatedChannelName field value if set, zero value otherwise.
func (o *Subscriber) GetObfuscatedChannelName() string {
	if o == nil || o.ObfuscatedChannelName == nil {
		var ret string
		return ret
	}
	return *o.ObfuscatedChannelName
}

// GetObfuscatedChannelNameOk returns a tuple with the ObfuscatedChannelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetObfuscatedChannelNameOk() (*string, bool) {
	if o == nil || o.ObfuscatedChannelName == nil {
		return nil, false
	}
	return o.ObfuscatedChannelName, true
}

// HasObfuscatedChannelName returns a boolean if a field has been set.
func (o *Subscriber) HasObfuscatedChannelName() bool {
	if o != nil && o.ObfuscatedChannelName != nil {
		return true
	}

	return false
}

// SetObfuscatedChannelName gets a reference to the given string and assigns it to the ObfuscatedChannelName field.
func (o *Subscriber) SetObfuscatedChannelName(v string) {
	o.ObfuscatedChannelName = &v
}

// GetWorkspaceName returns the WorkspaceName field value if set, zero value otherwise.
func (o *Subscriber) GetWorkspaceName() string {
	if o == nil || o.WorkspaceName == nil {
		var ret string
		return ret
	}
	return *o.WorkspaceName
}

// GetWorkspaceNameOk returns a tuple with the WorkspaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetWorkspaceNameOk() (*string, bool) {
	if o == nil || o.WorkspaceName == nil {
		return nil, false
	}
	return o.WorkspaceName, true
}

// HasWorkspaceName returns a boolean if a field has been set.
func (o *Subscriber) HasWorkspaceName() bool {
	if o != nil && o.WorkspaceName != nil {
		return true
	}

	return false
}

// SetWorkspaceName gets a reference to the given string and assigns it to the WorkspaceName field.
func (o *Subscriber) SetWorkspaceName(v string) {
	o.WorkspaceName = &v
}

// GetQuarantinedAt returns the QuarantinedAt field value if set, zero value otherwise.
func (o *Subscriber) GetQuarantinedAt() time.Time {
	if o == nil || o.QuarantinedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.QuarantinedAt
}

// GetQuarantinedAtOk returns a tuple with the QuarantinedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetQuarantinedAtOk() (*time.Time, bool) {
	if o == nil || o.QuarantinedAt == nil {
		return nil, false
	}
	return o.QuarantinedAt, true
}

// HasQuarantinedAt returns a boolean if a field has been set.
func (o *Subscriber) HasQuarantinedAt() bool {
	if o != nil && o.QuarantinedAt != nil {
		return true
	}

	return false
}

// SetQuarantinedAt gets a reference to the given time.Time and assigns it to the QuarantinedAt field.
func (o *Subscriber) SetQuarantinedAt(v time.Time) {
	o.QuarantinedAt = &v
}

// GetPurgeAt returns the PurgeAt field value if set, zero value otherwise.
func (o *Subscriber) GetPurgeAt() time.Time {
	if o == nil || o.PurgeAt == nil {
		var ret time.Time
		return ret
	}
	return *o.PurgeAt
}

// GetPurgeAtOk returns a tuple with the PurgeAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPurgeAtOk() (*time.Time, bool) {
	if o == nil || o.PurgeAt == nil {
		return nil, false
	}
	return o.PurgeAt, true
}

// HasPurgeAt returns a boolean if a field has been set.
func (o *Subscriber) HasPurgeAt() bool {
	if o != nil && o.PurgeAt != nil {
		return true
	}

	return false
}

// SetPurgeAt gets a reference to the given time.Time and assigns it to the PurgeAt field.
func (o *Subscriber) SetPurgeAt(v time.Time) {
	o.PurgeAt = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *Subscriber) GetComponents() string {
	if o == nil || o.Components == nil {
		var ret string
		return ret
	}
	return *o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetComponentsOk() (*string, bool) {
	if o == nil || o.Components == nil {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *Subscriber) HasComponents() bool {
	if o != nil && o.Components != nil {
		return true
	}

	return false
}

// SetComponents gets a reference to the given string and assigns it to the Components field.
func (o *Subscriber) SetComponents(v string) {
	o.Components = &v
}

// GetPageAccessUserId returns the PageAccessUserId field value if set, zero value otherwise.
func (o *Subscriber) GetPageAccessUserId() string {
	if o == nil || o.PageAccessUserId == nil {
		var ret string
		return ret
	}
	return *o.PageAccessUserId
}

// GetPageAccessUserIdOk returns a tuple with the PageAccessUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetPageAccessUserIdOk() (*string, bool) {
	if o == nil || o.PageAccessUserId == nil {
		return nil, false
	}
	return o.PageAccessUserId, true
}

// HasPageAccessUserId returns a boolean if a field has been set.
func (o *Subscriber) HasPageAccessUserId() bool {
	if o != nil && o.PageAccessUserId != nil {
		return true
	}

	return false
}

// SetPageAccessUserId gets a reference to the given string and assigns it to the PageAccessUserId field.
func (o *Subscriber) SetPageAccessUserId(v string) {
	o.PageAccessUserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Subscriber) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Subscriber) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Subscriber) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o Subscriber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SkipConfirmationNotification != nil {
		toSerialize["skip_confirmation_notification"] = o.SkipConfirmationNotification
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.PhoneCountry != nil {
		toSerialize["phone_country"] = o.PhoneCountry
	}
	if o.DisplayPhoneNumber != nil {
		toSerialize["display_phone_number"] = o.DisplayPhoneNumber
	}
	if o.ObfuscatedChannelName != nil {
		toSerialize["obfuscated_channel_name"] = o.ObfuscatedChannelName
	}
	if o.WorkspaceName != nil {
		toSerialize["workspace_name"] = o.WorkspaceName
	}
	if o.QuarantinedAt != nil {
		toSerialize["quarantined_at"] = o.QuarantinedAt
	}
	if o.PurgeAt != nil {
		toSerialize["purge_at"] = o.PurgeAt
	}
	if o.Components != nil {
		toSerialize["components"] = o.Components
	}
	if o.PageAccessUserId != nil {
		toSerialize["page_access_user_id"] = o.PageAccessUserId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriber struct {
	value *Subscriber
	isSet bool
}

func (v NullableSubscriber) Get() *Subscriber {
	return v.value
}

func (v *NullableSubscriber) Set(val *Subscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriber(val *Subscriber) *NullableSubscriber {
	return &NullableSubscriber{value: val, isSet: true}
}

func (v NullableSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


